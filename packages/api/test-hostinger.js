#!/usr/bin/env node

/**
 * Script de test pour l'API Hostinger
 * Usage: node test-hostinger.js
 */

require('dotenv').config();
const HostingerService = require('./src/services/HostingerService');

async function testHostingerIntegration() {
  console.log('üß™ Test de l\'int√©gration Hostinger...\n');
  
  // V√©rifier les variables d'environnement
  console.log('üìã Configuration:');
  console.log('- API Key:', process.env.HOSTINGER_API_KEY ? '‚úÖ Configur√©e' : '‚ùå Manquante');
  console.log('- Domain ID:', process.env.HOSTINGER_DOMAIN_ID ? '‚úÖ Configur√©e' : '‚ùå Manquante');
  console.log('- Server ID:', process.env.HOSTINGER_SERVER_ID ? `‚úÖ ${process.env.HOSTINGER_SERVER_ID}` : '‚ùå Manquante');
  console.log('');
  
  const hostingerService = new HostingerService();
  
  try {
    // Test 1: M√©triques serveur
    console.log('üñ•Ô∏è  Test 1: M√©triques serveur...');
    const serverMetrics = await hostingerService.getServerMetrics();
    console.log('‚úÖ M√©triques serveur r√©cup√©r√©es:');
    console.log(`   - Statut: ${serverMetrics.status}`);
    console.log(`   - Uptime: ${serverMetrics.uptime}%`);
    console.log(`   - CPU: ${serverMetrics.cpu.usage}%`);
    console.log(`   - RAM: ${serverMetrics.memory.percentage}%`);
    console.log(`   - Disque: ${serverMetrics.disk.percentage}%`);
    console.log('');
    
    // Test 2: Informations domaine
    console.log('üåê Test 2: Informations domaine...');
    const domainInfo = await hostingerService.getDomainInfo();
    console.log('‚úÖ Informations domaine r√©cup√©r√©es:');
    console.log(`   - SSL valide: ${domainInfo.ssl.valid ? 'Oui' : 'Non'}`);
    console.log(`   - SSL expire le: ${domainInfo.ssl.expiresAt}`);
    console.log(`   - Jours restants: ${domainInfo.ssl.daysUntilExpiry}`);
    console.log(`   - Domaines: ${domainInfo.domains.length}`);
    console.log('');
    
    // Test 3: M√©triques s√©curit√©
    console.log('üîí Test 3: M√©triques s√©curit√©...');
    const securityMetrics = await hostingerService.getSecurityMetrics();
    console.log('‚úÖ M√©triques s√©curit√© r√©cup√©r√©es:');
    console.log(`   - Firewall: ${securityMetrics.firewall.status}`);
    console.log(`   - Vuln√©rabilit√©s critiques: ${securityMetrics.vulnerabilities.critical}`);
    console.log(`   - Derni√®re sauvegarde: ${securityMetrics.backups.status}`);
    console.log('');
    
    // Test 4: Toutes les m√©triques
    console.log('üìä Test 4: Toutes les m√©triques...');
    const allMetrics = await hostingerService.getAllMetrics();
    console.log('‚úÖ Toutes les m√©triques r√©cup√©r√©es:');
    console.log(`   - Derni√®re mise √† jour: ${allMetrics.lastUpdate}`);
    console.log('');
    
    console.log('üéâ Tous les tests ont r√©ussi !');
    console.log('');
    console.log('üìù Prochaines √©tapes:');
    console.log('1. V√©rifiez que les donn√©es correspondent √† votre serveur');
    console.log('2. Si les donn√©es sont simul√©es, v√©rifiez vos credentials API');
    console.log('3. Testez l\'endpoint /api/infrastructure/metrics dans votre admin');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    console.log('');
    console.log('üîß V√©rifications:');
    console.log('1. Vos credentials Hostinger sont-ils corrects ?');
    console.log('2. Votre API key a-t-elle les bonnes permissions ?');
    console.log('3. Le server_id 747559 est-il correct ?');
    console.log('4. √ätes-vous connect√© √† internet ?');
  }
}

// Ex√©cuter le test
if (require.main === module) {
  testHostingerIntegration();
}

module.exports = { testHostingerIntegration }; 