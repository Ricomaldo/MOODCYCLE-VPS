// services/PromptBuilder.js
const personaClosings = require('../data/persona-closings.json');
const phases = require('../data/phases.json');

class PromptBuilder {
    constructor() {
      // Traits linguistiques par persona
      this.personaTraits = {
        emma: {
          style: "Amicale et √©ducative, comme une grande s≈ìur",
          tone: "Encourageante, rassurante, patiente",
          vocabulary: "Simple, accessible, √©vite jargon m√©dical",
          example: "C'est tout √† fait normal ma belle ‚ú®"
        },
        laure: {
          style: "Professionnelle et efficace",
          tone: "Directe mais bienveillante, orient√©e solutions",
          vocabulary: "Pr√©cis, informatif, termes techniques expliqu√©s",
          example: "Selon ton profil, voici ce que je recommande"
        },
        sylvie: {
          style: "Compr√©hensive et soutenante",
          tone: "Chaleureuse, rassurante, avec sagesse pratique",
          vocabulary: "Empathique, mature, reconna√Æt les d√©fis",
          example: "Je comprends ces bouleversements, tu n'es pas seule"
        },
        christine: {
          style: "Sage et inspirante",
          tone: "Apaisante, mystique, sagesse ancestrale",
          vocabulary: "Riche, m√©taphorique, connexion nature",
          example: "Ta sagesse f√©minine s'√©panouit avec les ann√©es"
        },
        clara: {
          style: "Moderne et analytique",
          tone: "Enthusiaste, pr√©cise, orient√©e optimisation",
          vocabulary: "Technique accessible, r√©f√©rences scientifiques",
          example: "Tes donn√©es montrent une tendance int√©ressante"
        }
      };
    }
  
        /**
     * Construit prompt contextuel bas√© sur profil utilisateur
     */
    buildContextualPrompt(contextData) {
      const {
        persona = 'emma',
        userProfile = {},
        currentPhase = 'non d√©finie',
        preferences = {},
        communicationTone = 'friendly'
      } = contextData;

      // Extraire pr√©f√©rences fortes (score >= 4)
      const strongPreferences = this.extractStrongPreferences(preferences);
      
      // Enrichir traits avec donn√©es JSON valid√©es
      const enrichedTraits = this.enrichPersonaTraits(persona, currentPhase, strongPreferences);
      
      // Construire prompt structur√©
      return this.assemblePrompt({
        persona,
        traits: enrichedTraits,
        userProfile,
        currentPhase,
        strongPreferences,
        communicationTone
      });
    }

    /**
     * Mappe phases fran√ßaises vers cl√©s JSON anglaises
     */
    mapPhaseToJsonKey(phase) {
      const phaseMapping = {
        'folliculaire': 'follicular',
        'menstruelle': 'menstrual', 
        'ovulatoire': 'ovulatory',
        'lut√©ale': 'luteal'
      };
      
      return phaseMapping[phase] || phase;
    }

    /**
     * Extrait modulation comportementale de la section melune
     */
    getBehaviorModulation(currentPhase, mappedPhase) {
      console.log('üé≠ getBehaviorModulation called:', { currentPhase, mappedPhase });
      
      const phaseData = phases[mappedPhase];
      if (!phaseData || !phaseData.melune) {
        console.log('‚ö†Ô∏è Pas de donn√©es melune trouv√©es pour phase:', mappedPhase);
        return {
          tone: "bienveillante et adapt√©e",
          tempo: "communication √©quilibr√©e",
          vocabulary: "langage accessible et chaleureux",
          focus: "√©coute et accompagnement personnalis√©",
          avoid: "ton impersonnel ou distant",
          encouragementStyle: "encouragement authentique et respectueux"
        };
      }

      const melune = phaseData.melune;
      const behaviorMod = {
        tone: melune.tone || "bienveillante",
        tempo: melune.tempo || "communication √©quilibr√©e",
        vocabulary: Array.isArray(melune.vocabulary) ? melune.vocabulary.join(', ') : (melune.vocabulary || "langage accessible"),
        focus: melune.focus || "accompagnement personnalis√©",
        avoid: Array.isArray(melune.avoid) ? melune.avoid.join(', ') : (melune.avoid || "ton impersonnel"),
        encouragementStyle: melune.encouragementStyle || "encouragement authentique"
      };

      console.log('üé≠ Melune behavior:', behaviorMod);
      return behaviorMod;
    }

    /**
     * Enrichit les traits persona avec donn√©es JSON de Jeza
     */
    enrichPersonaTraits(persona, currentPhase, strongPreferences) {
      console.log('üîç DEBUG enrichPersonaTraits:', { persona, currentPhase, strongPreferences });
      
      // Traits de base
      const baseTraits = this.personaTraits[persona] || this.personaTraits.emma;
      console.log('üìù Base traits:', baseTraits);
      
      // R√©cup√©rer formules de politesse depuis persona-closings.json
      const closings = personaClosings[persona] || personaClosings.emma;
      console.log('üí¨ Closings loaded:', closings);
      
      // FIX: Mapper phase fran√ßaise vers cl√© JSON anglaise
      const mappedPhase = this.mapPhaseToJsonKey(currentPhase);
      const phaseData = phases[mappedPhase];
      console.log('üåô Phase mapping:', { currentPhase, mappedPhase, found: !!phaseData });
      
      // R√©cup√©rer modulation comportementale Melune
      const behaviorModulation = this.getBehaviorModulation(currentPhase, mappedPhase);
      
      // Trouver enrichissement contextuel sp√©cifique √† cette persona/phase
      const contextualText = phaseData?.contextualEnrichments
        ?.find(e => e.targetPersona === persona)?.contextualText || "";
      console.log('‚ú® Contextual text:', contextualText);
      
      // Traits enrichis
      const enrichedTraits = {
        ...baseTraits,
        // Contexte de phase
        phaseContext: contextualText,
        phaseCharacteristics: phaseData?.characteristics || {},
        phaseSymbol: phaseData?.symbol || "",
        phaseArchetype: phaseData?.archetype || "",
        
        // Modulation comportementale Melune
        behaviorModulation,
        
        // Formules sp√©cialis√©es par focus
        closingStyles: {
          body: closings.body || "",
          nature: closings.nature || "",
          emotions: closings.emotions || ""
        },
        
        // Conseils contextuels
        phaseAdvice: phaseData?.advice || {},
        phaseAffirmation: phaseData?.affirmation || ""
      };
      
      console.log('üéØ Enriched traits result:', {
        phaseSymbol: enrichedTraits.phaseSymbol,
        phaseArchetype: enrichedTraits.phaseArchetype,
        hasClosingStyles: !!enrichedTraits.closingStyles,
        hasPhaseContext: !!enrichedTraits.phaseContext,
        hasBehaviorModulation: !!enrichedTraits.behaviorModulation
      });
      
      return enrichedTraits;
    }
  
    /**
     * Extrait pr√©f√©rences avec score >= 4
     */
    extractStrongPreferences(preferences) {
      const labels = {
        symptoms: 'sympt√¥mes physiques',
        moods: 'gestion √©motionnelle',
        phyto: 'rem√®des naturels',
        phases: '√©nergie cyclique',
        lithotherapy: 'lithoth√©rapie',
        rituals: 'rituels bien-√™tre'
      };
  
      return Object.entries(preferences)
        .filter(([_, value]) => value >= 4)
        .map(([key]) => labels[key])
        .filter(Boolean);
    }
  
        /**
     * Assemble le prompt final avec donn√©es enrichies
     */
        assemblePrompt({ persona, traits, userProfile, currentPhase, strongPreferences, communicationTone }) {
          const { prenom = 'ma belle', ageRange = 'non pr√©cis√©' } = userProfile;
         
          return `Tu es Melune, IA bienveillante sp√©cialis√©e dans le cycle f√©minin.
         
         PROFIL UTILISATRICE:
         - Nom: ${prenom}
         - √Çge: ${ageRange}
         - Persona: ${persona}
         - Phase actuelle: ${currentPhase} ${traits.phaseSymbol}
         - Arch√©type phase: ${traits.phaseArchetype}
         - Pr√©f√©rences fortes: ${strongPreferences.length > 0 ? strongPreferences.join(', ') : 'd√©couverte g√©n√©rale'}
         
         STYLE DE COMMUNICATION:
         - Approche: ${traits.style}
         - Ton: ${traits.tone}
         - Vocabulaire: ${traits.vocabulary}
         - Exemple type: "${traits.example}"
         
         CONTEXTE DE PHASE SP√âCIALIS√â:
         ${traits.phaseContext ? `- Perspective: ${traits.phaseContext}` : ''}
         ${traits.phaseCharacteristics?.emotional ? `- √âtat √©motionnel typique: ${traits.phaseCharacteristics.emotional.join(', ')}` : ''}
         ${traits.phaseCharacteristics?.energy ? `- Niveau √©nerg√©tique: ${traits.phaseCharacteristics.energy}` : ''}
         
         MODULATION COMPORTEMENTALE MELUNE:
         - Ton: ${traits.behaviorModulation?.tone || 'bienveillant'}
         - Tempo: ${traits.behaviorModulation?.tempo || '√©quilibr√©'}
         - Vocabulaire privil√©gi√©: ${traits.behaviorModulation?.vocabulary || 'accessible'}
         - Focus prioritaire: ${traits.behaviorModulation?.focus || 'accompagnement'}
         - √Ä √©viter absolument: ${traits.behaviorModulation?.avoid || 'ton impersonnel'}
         - Style d'encouragement: ${traits.behaviorModulation?.encouragementStyle || 'authentique'}
         
         FORMULES DE CL√îTURE SP√âCIALIS√âES:
         - Focus corporel: "${traits.closingStyles?.body || ''}"
         - Focus nature cyclique: "${traits.closingStyles?.nature || ''}"
         - Focus √©motionnel: "${traits.closingStyles?.emotions || ''}"
         
         R√àGLES:
         - PRIVIL√âGIER r√©ponses courtes (30-80 mots) et spontan√©es
         - R√©ponses longues SEULEMENT si explication complexe n√©cessaire
         - Une id√©e principale par r√©ponse maximum
         - Toujours terminer par question courte et engageante
         - Ton conversationnel naturel selon phase actuelle
         - Jamais de diagnostic m√©dical
         - Adapter conseils selon phase actuelle
         
         R√©ponds selon ce persona enrichi et contexte de phase:`;
         }  
    /**
     * Version compacte pour √©conomiser tokens
     */
    buildCompactPrompt(contextData) {
      const {
        persona = 'emma',
        userProfile = {},
        currentPhase = 'non d√©finie',
        preferences = {}
      } = contextData;

      const strongPrefs = this.extractStrongPreferences(preferences);
      const enrichedTraits = this.enrichPersonaTraits(persona, currentPhase, strongPrefs);

      return `Melune, IA cycle f√©minin.
Utilisatrice: ${userProfile.prenom || 'ma belle'}, ${userProfile.ageRange || '?'}
Persona: ${persona} - ${enrichedTraits.style}
Phase: ${currentPhase} ${enrichedTraits.phaseSymbol}
Arch√©type: ${enrichedTraits.phaseArchetype}
Pr√©f√©rences: ${strongPrefs.join(', ') || 'g√©n√©rale'}
Style: ${enrichedTraits.tone}
Formule: "${enrichedTraits.closingStyles?.emotions || enrichedTraits.example}"
Max 200 mots, question finale.`;
    }
  
    /**
     * Valide le contexte re√ßu
     */
    validateContext(contextData) {
      const errors = [];
  
      if (!contextData) {
        errors.push('Context data manquant');
        return errors;
      }
  
      // Validation persona
      if (contextData.persona && !this.personaTraits[contextData.persona]) {
        errors.push(`Persona invalide: ${contextData.persona}`);
      }
  
      // Validation preferences format
      if (contextData.preferences) {
        const validKeys = ['symptoms', 'moods', 'phyto', 'phases', 'lithotherapy', 'rituals'];
        Object.keys(contextData.preferences).forEach(key => {
          if (!validKeys.includes(key)) {
            errors.push(`Cl√© pr√©f√©rence invalide: ${key}`);
          }
        });
      }
  
      return errors;
    }
  }
  
  module.exports = PromptBuilder;