// tests/test-promptbuilder-v2.js
const PromptBuilder = require('../services/PromptBuilder');

console.log('üß™ Tests PromptBuilder v2 - MoodCycle');
console.log('=====================================\n');

const promptBuilder = new PromptBuilder();

// === 1. TESTS UNITAIRES ===
console.log('üìã 1. TESTS UNITAIRES');
console.log('---------------------');

// Test 1: S√©lection insights avec fallback baseContent
describe('selectInsights avec fallback baseContent', () => {
  const mockPrefs = { symptoms: 5, moods: 4 };
  const mockMessage = "Je me sens fatigu√©e";
  
  console.log('üîç Test: S√©lection insights Emma - Phase menstruelle');
  
  // Analyser message d'abord
  const messageAnalysis = promptBuilder.analyzeMessage(mockMessage, []);
  const insights = promptBuilder.selectInsights('emma', 'menstrual', mockPrefs, messageAnalysis);
  
  console.log(`  ‚Ä¢ Insights trouv√©s: ${insights.length}`);
  
  // V√©rifier que chaque insight a soit une variante Emma soit baseContent
  const hasValidContent = insights.every(insight => {
    const hasPersonaVariant = insight.personaVariants?.emma;
    const hasBaseContent = insight.baseContent;
    return hasPersonaVariant || hasBaseContent;
  });
  
  console.log(`  ‚Ä¢ Tous ont contenu valide: ${hasValidContent ? '‚úÖ' : '‚ùå'}`);
  
  // Afficher d√©tails pour debug
  insights.forEach((insight, index) => {
    const content = insight.personaVariants?.emma || insight.baseContent || 'MANQUANT';
    console.log(`  ‚Ä¢ Insight ${index + 1}: ${insight.id || 'no-id'}`);
    console.log(`    Content: ${content.substring(0, 50)}...`);
  });
});

// Test 2: Mirroring adapte longueur selon style user
describe('calculateMirroring adapte style utilisateur', () => {
  console.log('\nüîÑ Test: Mirroring style concis');
  
  const mockHistory = [
    { user: "ok", melune: "Bonjour ! Comment allez-vous ?" },
    { user: "bien", melune: "Parfait ! Que puis-je faire pour vous ?" },
    { user: "aide", melune: "Bien s√ªr ! Dites-moi ce qui vous pr√©occupe." }
  ];
  
  const rules = promptBuilder.calculateMirroring("ok", mockHistory);
  
  console.log(`  ‚Ä¢ Style d√©tect√©: ${rules.style}`);
  console.log(`  ‚Ä¢ Mots min: ${rules.minWords}`);
  console.log(`  ‚Ä¢ Mots max: ${rules.maxWords}`);
  console.log(`  ‚Ä¢ Style concis d√©tect√©: ${rules.minWords <= 25 ? '‚úÖ' : '‚ùå'}`);
});

// Test 3: Analyse message d√©tecte urgence
describe('analyzeMessage d√©tecte urgence', () => {
  console.log('\nüö® Test: D√©tection urgence');
  
  const urgentMessage = "J'ai une douleur insupportable !!! Aide-moi üò≠";
  const normalMessage = "Comment √ßa va aujourd'hui ?";
  
  const urgentAnalysis = promptBuilder.analyzeMessage(urgentMessage, []);
  const normalAnalysis = promptBuilder.analyzeMessage(normalMessage, []);
  
  console.log(`  ‚Ä¢ Message urgent - Intensit√©: ${urgentAnalysis.emotion.intensity}`);
  console.log(`  ‚Ä¢ Message normal - Intensit√©: ${normalAnalysis.emotion.intensity}`);
  console.log(`  ‚Ä¢ Urgence d√©tect√©e: ${urgentAnalysis.emotion.intensity > 0.7 ? '‚úÖ' : '‚ùå'}`);
});

// === 2. TEST INT√âGRATION CHATCONTROLLER ===
console.log('\nüì° 2. TEST INT√âGRATION');
console.log('----------------------');

// Mock payload de test
const testPayload = {
  message: "Je me sens fatigu√©e",
  context: { 
    persona: 'emma', 
    currentPhase: 'luteal',
    preferences: { energie: 5, symptoms: 4 },
    userProfile: { prenom: 'Sarah', ageRange: '25-35' }
  }
};

console.log('üéØ Test: Construction prompt complet');
console.log(`  ‚Ä¢ Message: "${testPayload.message}"`);
console.log(`  ‚Ä¢ Persona: ${testPayload.context.persona}`);
console.log(`  ‚Ä¢ Phase: ${testPayload.context.currentPhase}`);

// Construction prompt enrichi
const enrichedPrompt = promptBuilder.buildContextualPrompt({
  ...testPayload.context,
  message: testPayload.message,
  conversationHistory: []
});

console.log(`\nüìù Prompt g√©n√©r√© (${enrichedPrompt.length} caract√®res):`);
console.log('---');
console.log(enrichedPrompt.substring(0, 300) + '...');
console.log('---');

// V√©rification des insights utilis√©s
const messageAnalysisForInsights = promptBuilder.analyzeMessage(testPayload.message, []);
const selectedInsights = promptBuilder.selectInsights(
  testPayload.context.persona,
  testPayload.context.currentPhase,
  testPayload.context.preferences,
  messageAnalysisForInsights
);

console.log(`\nüéØ Insights utilis√©s (${selectedInsights.length}):`);
selectedInsights.forEach((insight, index) => {
  console.log(`  ${index + 1}. ${insight.id || 'no-id'}`);
  const content = insight.personaVariants?.emma || insight.baseContent || 'MANQUANT';
  console.log(`     "${content.substring(0, 60)}..."`);
});

// D√©tection navigation
const messageAnalysis = promptBuilder.analyzeMessage(testPayload.message, []);
const navigationHints = promptBuilder.detectNavigationNeeds(messageAnalysis, testPayload.context.currentPhase);

console.log(`\nüì± Navigation sugg√©r√©e (${navigationHints.length}):`);
navigationHints.forEach((hint, index) => {
  console.log(`  ${index + 1}. Vers: ${hint.target}`);
  console.log(`     Raison: ${hint.reason}`);
});

// === 3. TESTS VALIDATION ===
console.log('\n‚úÖ 3. TESTS VALIDATION');
console.log('----------------------');

// Test validation contexte
const validationTests = [
  {
    name: 'Contexte valide complet',
    data: { 
      persona: 'emma', 
      message: 'Hello', 
      conversationHistory: [],
      currentPhase: 'menstrual',
      preferences: { symptoms: 4 }
    },
    expectedValid: true
  },
  {
    name: 'Persona invalide',
    data: { 
      persona: 'invalid', 
      message: 'Hello',
      currentPhase: 'menstrual'
    },
    expectedValid: false
  },
  {
    name: 'Phase invalide',
    data: { 
      persona: 'emma', 
      message: 'Hello',
      currentPhase: 'invalid_phase'
    },
    expectedValid: false
  }
];

validationTests.forEach(test => {
  try {
    const prompt = promptBuilder.buildContextualPrompt(test.data);
    const isValid = prompt.length > 100; // Prompt minimal g√©n√©r√©
    const result = isValid === test.expectedValid;
    console.log(`  ${test.name}: ${result ? '‚úÖ' : '‚ùå'}`);
    if (!result) {
      console.log(`    Attendu: ${test.expectedValid}, Obtenu: ${isValid}`);
    }
  } catch (error) {
    const result = !test.expectedValid; // Erreur attendue pour cas invalides
    console.log(`  ${test.name}: ${result ? '‚úÖ' : '‚ùå'} (Exception: ${error.message})`);
  }
});

// === 4. TEST PERFORMANCE ===
console.log('\n‚ö° 4. TEST PERFORMANCE');
console.log('---------------------');

const performanceTest = () => {
  const start = Date.now();
  
  // G√©n√©rer 10 prompts diff√©rents
  for (let i = 0; i < 10; i++) {
    const personas = ['emma', 'laure', 'clara', 'sylvie', 'christine'];
    const phases = ['menstrual', 'follicular', 'ovulatory', 'luteal'];
    
    promptBuilder.buildContextualPrompt({
      persona: personas[i % personas.length],
      currentPhase: phases[i % phases.length],
      message: `Test message ${i}`,
      preferences: { symptoms: Math.floor(Math.random() * 5) + 1 },
      conversationHistory: []
    });
  }
  
  const duration = Date.now() - start;
  console.log(`  ‚Ä¢ 10 prompts g√©n√©r√©s en: ${duration}ms`);
  console.log(`  ‚Ä¢ Moyenne par prompt: ${duration/10}ms`);
  console.log(`  ‚Ä¢ Performance: ${duration < 100 ? '‚úÖ Excellent' : duration < 500 ? '‚ö†Ô∏è Acceptable' : '‚ùå Lent'}`);
};

performanceTest();

// === 5. TEST CACHE ===
console.log('\nüíæ 5. TEST CACHE INSIGHTS');
console.log('-------------------------');

const cacheTest = () => {
  const mockAnalysis = promptBuilder.analyzeMessage("test message", []);
  
  // Premier appel (miss cache)
  const start1 = Date.now();
  const insights1 = promptBuilder.selectInsights('emma', 'menstrual', { symptoms: 5 }, mockAnalysis);
  const time1 = Date.now() - start1;
  
  // Deuxi√®me appel (hit cache)
  const start2 = Date.now();
  const insights2 = promptBuilder.selectInsights('emma', 'menstrual', { symptoms: 5 }, mockAnalysis);
  const time2 = Date.now() - start2;
  
  console.log(`  ‚Ä¢ Premier appel (cache miss): ${time1}ms`);
  console.log(`  ‚Ä¢ Deuxi√®me appel (cache hit): ${time2}ms`);
  console.log(`  ‚Ä¢ Am√©lioration cache: ${time1 > time2 ? '‚úÖ' : '‚ùå'} (${Math.round((time1-time2)/time1*100)}%)`);
  console.log(`  ‚Ä¢ R√©sultats identiques: ${JSON.stringify(insights1) === JSON.stringify(insights2) ? '‚úÖ' : '‚ùå'}`);
};

cacheTest();

console.log('\nüéâ Tests PromptBuilder v2 termin√©s !');
console.log('====================================');

// Helper function pour simuler describe (comme Jest)
function describe(name, testFn) {
  console.log(`\nüìã ${name}:`);
  testFn();
} 